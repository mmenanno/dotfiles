#!/bin/bash
# Enhanced nixup script with bootstrap support and 1Password integration

set -euo pipefail

# shellcheck disable=SC1091
source "${BASH_SOURCE[0]%/*}/shared"

# Enable emoji logging style for nixup
export EMOJI_LOG_STYLE=true

# Print usage information
show_help() {
    cat << EOF
nixup-with-secrets - Nix Dotfiles Configuration Manager

DESCRIPTION:
    Enhanced nixup script with bootstrap support and 1Password integration.
    Automatically detects fresh systems and runs bootstrap mode, or loads
    secrets from 1Password for full configuration deployment.

USAGE:
    nixup-with-secrets [darwin-rebuild options]

OPTIONS:
    -h, --help              Show this help message
    [other options]         Passed through to darwin-rebuild

MODES:
    Bootstrap Mode:
        - Detected when 1Password CLI is not available
        - Installs essential packages and 1Password CLI
        - Provides setup instructions for manual completion

    Full Mode:
        - Loads secrets from 1Password Nix vault
        - Applies complete configuration with personal settings

EXAMPLES:
    nixup-with-secrets                    # Standard operation
    nixup-with-secrets --show-trace       # Debug mode with trace output

1PASSWORD VAULT STRUCTURE:
    The script expects secrets in a "Nix" vault with these items:
    - MainID: Personal GitHub/SSH configuration
    - Server: Server connection details
    - PrivateID: Optional private repository settings
    - SSH: Server SSH keys
    - Git Config: Additional git configuration

EOF
}

# Function to check if this is a fresh system
is_fresh_system() {
    # Check if 1Password CLI is available
    if ! command -v op >/dev/null 2>&1; then
        return 0  # Fresh system - 1Password CLI not installed
    fi
    return 1  # Not fresh - 1Password CLI exists
}

# Function to run bootstrap
run_bootstrap() {
    print_bootstrap "Fresh system detected - running bootstrap mode"
    print_status "This will install 1Password CLI and other essentials..."

    export NIX_BOOTSTRAP_MODE=1
    export NIX_SYSTEM_USER="$(id -un)"

    # Run darwin-rebuild in bootstrap mode
    if sudo -E darwin-rebuild switch --flake ~/dotfiles/nix#macbook_setup --impure "$@"; then
        print_success "Bootstrap complete!"
        echo ""
        print_status "Next steps:"
        echo "1. Launch 1Password app and sign in"
        echo "2. Enable 1Password CLI: 1Password ‚Üí Settings ‚Üí Developer ‚Üí Command Line Interface"
        echo "3. Sign into 1Password CLI: ${BLUE}op signin${NC}"
        echo "4. Run '${BLUE}nixup${NC}' again to load your personal configuration"
        echo ""
    else
        print_error "Bootstrap failed!"
        exit 1
    fi
}


# Function to load secrets
load_secrets() {
    # Batch check required commands
    local missing_commands=()
    command -v op >/dev/null 2>&1 || missing_commands+=("1Password CLI")
    command -v jq >/dev/null 2>&1 || missing_commands+=("jq")

    if [[ ${#missing_commands[@]} -gt 0 ]]; then
        print_error "Missing required commands: ${missing_commands[*]}"
        return 1
    fi

    # Check if signed in
    if ! op account list >/dev/null 2>&1; then
        print_error "Not signed into 1Password"
        echo "Run: ${BLUE}op signin${NC}"
        return 1
    fi

    print_status "Loading secrets from 1Password..."

    # Fetch all items in parallel for efficiency
    local main_id_json server_json private_id_json ssh_json git_config_json github_json

    print_status "Fetching 1Password items..."
    main_id_json="$(op item get "MainID" --vault="Nix" --format=json 2>/dev/null || echo '{}')"
    server_json="$(op item get "Server" --vault="Nix" --format=json 2>/dev/null || echo '{}')"
    private_id_json="$(op item get "PrivateID" --vault="Nix" --format=json 2>/dev/null || echo '{}')"
    ssh_json="$(op item get "SSH" --vault="Nix" --format=json 2>/dev/null || echo '{}')"
    git_config_json="$(op item get "Git Config" --vault="Nix" --format=json 2>/dev/null || echo '{}')"
    github_json="$(op item get "Github" --vault="Nix" --format=json 2>/dev/null || echo '{}')"

    # Process secrets with optimized JSON parsing

    # Define secrets configuration: VAR_NAME|ITEM_JSON_VAR|FIELD_NAME|DESCRIPTION|REQUIRED
    local secrets=(
        "NIX_PERSONAL_EMAIL|main_id_json|github_email|email configuration|true"
        "NIX_GITHUB_USER|main_id_json|github_user|GitHub user configuration|true"
        "NIX_SIGNING_KEY|main_id_json|signing_key|signing key configuration|true"
        "NIX_SSH_MAIN_GITHUB_KEY|main_id_json|ssh_key|main SSH key configuration|true"
        "NIX_SSH_MAIN_GITHUB_KEYFILE|main_id_json|github_keyfile|main GitHub keyfile name|true"
        "NIX_LAPTOP_NAME|main_id_json|laptop_name|laptop name configuration|true"
        "NIX_FULL_NAME|main_id_json|name_full|full name configuration|true"
        "NIX_SERVER_IP_MAIN|server_json|main_ip|server IP configurations|true"
        "NIX_SERVER_IP_NVM|server_json|nvm_ip|server IP configurations|false"
        "NIX_SERVER_NAME_L|server_json|name_l|server name configuration|false"
        "NIX_SERVER_NVM_NAME|server_json|nvm_name|NVM server name configuration|false"
        "NIX_SSH_MAIN_SERVER_KEYFILE|server_json|main_server_keyfile|main server keyfile name|false"
        "NIX_SSH_NVM_SERVER_KEYFILE|server_json|nvm_server_keyfile|NVM server keyfile name|false"
        "NIX_PRIVATE_EMAIL|private_id_json|ssh_email|private SSH email configuration|false"
        "NIX_PRIVATE_USER|private_id_json|user|private user configuration|false"
        "NIX_PRIVATE_USER_SHORT|private_id_json|user_short|private user short name|false"
        "NIX_PRIVATE_SIGNING_KEY|private_id_json|signing_key|private ID configuration|false"
        "NIX_PRIVATE_GITDIR|private_id_json|gitdir|private ID configuration|false"
        "NIX_SSH_PRIVATE_GITHUB_KEY|private_id_json|ssh_key|private SSH key configuration|false"
        "NIX_SSH_PRIVATE_GITHUB_KEYFILE|private_id_json|github_keyfile|private GitHub keyfile name|false"
        "NIX_SSH_MAIN_SERVER_KEY|ssh_json|unraid_key|main server SSH key configuration|false"
        "NIX_SSH_NVM_SERVER_KEY|ssh_json|nvm_key|NVM server SSH key configuration|false"
        "NIX_FORGEJO_DOMAIN|git_config_json|forgejo_domain|forgejo domain configuration|false"
        "NIX_GITHUB_MCP_TOKEN|github_json|github_mcp_token|GitHub MCP token configuration|false"
    )

    local secrets_loaded=0
    local private_secrets=0
    local private_loaded=0
    local missing_items=()

    # Prepare batch export of environment variables
    local export_vars=()

    # Load and validate each secret using pre-extracted values
    for secret_config in "${secrets[@]}"; do
        IFS='|' read -r var_name item_var field_name description required <<< "$secret_config"

        # Get the value from the appropriate JSON using original method for compatibility
        local item_json_value
        case "$item_var" in
            "main_id_json") item_json_value="$main_id_json" ;;
            "server_json") item_json_value="$server_json" ;;
            "private_id_json") item_json_value="$private_id_json" ;;
            "ssh_json") item_json_value="$ssh_json" ;;
            "git_config_json") item_json_value="$git_config_json" ;;
            "github_json") item_json_value="$github_json" ;;
            *) item_json_value="{}" ;;
        esac

        # Extract field value using jq
        local value
        value=$(echo "$item_json_value" | jq -r --arg field "$field_name" '.fields[]? | select(.label == $field) | .value // empty' 2>/dev/null || echo "")

        # Add to batch export
        export_vars+=("$var_name=$value")

        # Validate and report
        if [[ -n "$value" ]]; then
            print_success "Loaded $description"
            ((secrets_loaded++))

            # Track private ID secrets specifically
            if [[ "$var_name" =~ ^NIX_PRIVATE_ ]]; then
                ((private_loaded++))
            fi
        else
            # Track missing items for final report
            local item_path=""
            case "$item_var" in
                "main_id_json") item_path="Nix/MainID/$field_name" ;;
                "server_json") item_path="Nix/Server/$field_name" ;;
                "private_id_json") item_path="Nix/PrivateID/$field_name" ;;
                "ssh_json") item_path="Nix/SSH/$field_name" ;;
                "git_config_json") item_path="Nix/Git Config/$field_name" ;;
                "github_json") item_path="Nix/Github/$field_name" ;;
            esac

            if [[ "$required" == "true" ]]; then
                print_warning "Could not load $description from 1Password"
                missing_items+=("$item_path (required)")
            else
                missing_items+=("$item_path")
            fi
        fi

        # Count total private secrets
        if [[ "$var_name" =~ ^NIX_PRIVATE_ ]]; then
            ((private_secrets++))
        fi
    done

    # Batch export all variables
    for export_var in "${export_vars[@]}"; do
        # shellcheck disable=SC2163
        export "$export_var"
    done

    # Special validation for complete private ID configuration
    if [[ $private_loaded -eq $private_secrets && $private_secrets -gt 0 ]]; then
        print_success "Complete private ID configuration loaded"
    fi

    # Final validation - only show missing items if any
    if [[ ${#missing_items[@]} -gt 0 ]]; then
        print_status "Missing 1Password items:"
        for item in "${missing_items[@]}"; do
            echo "  - $item"
        done
        echo ""
    fi

    # Fail only if no secrets were loaded at all
    if [[ $secrets_loaded -eq 0 ]]; then
        print_error "No secrets loaded from 1Password"
        return 1
    fi

    return 0
}

# Main execution logic
main() {
    # Handle help option early
    for arg in "$@"; do
        if [[ "$arg" == "-h" || "$arg" == "--help" ]]; then
            show_help_and_exit
        fi
    done

    echo "üè† Nix Dotfiles Configuration Manager"
    echo "======================================"

    if is_fresh_system; then
        run_bootstrap "$@"
    else
        if load_secrets; then
            # Export the current macOS username for the flake to use
            export NIX_SYSTEM_USER="$(id -un)"
            print_status "Applying configuration with secrets..."
            if sudo -E darwin-rebuild switch --flake ~/dotfiles/nix#macbook_setup --impure "$@"; then
                print_success "Configuration applied successfully!"
            else
                print_error "Configuration build failed!"
                exit 1
            fi
        else
            print_error "Failed to load secrets. Configuration not applied."
            echo ""
            print_status "You can still run in bootstrap mode with:"
            echo "  ${BLUE}NIX_BOOTSTRAP_MODE=1 sudo -E darwin-rebuild switch --flake ~/dotfiles/nix#macbook_setup --impure${NC}"
            exit 1
        fi
    fi
}

# Run main function with all arguments
main "$@"
