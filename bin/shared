#!/bin/bash
# Shared utilities for dotfiles scripts
# Source this file to get colors and common logging functions

# Colors for output - exported for use in other scripts
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[1;33m'
export BLUE='\033[0;34m'
export NC='\033[0m' # No Color

# Standard logging functions with QUIET/VERBOSE support
log_info() {
    if [[ "${QUIET:-false}" == false ]]; then
        echo -e "${BLUE}[INFO]${NC} $*" >&2
    fi
}

log_success() {
    if [[ "${QUIET:-false}" == false ]]; then
        echo -e "${GREEN}[SUCCESS]${NC} $*" >&2
    fi
}

log_warning() {
    if [[ "${QUIET:-false}" == false ]]; then
        echo -e "${YELLOW}[WARNING]${NC} $*" >&2
    fi
}

log_error() {
    # Always show errors regardless of QUIET flag
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

log_verbose() {
    if [[ "${VERBOSE:-false}" == true && "${QUIET:-false}" == false ]]; then
        echo -e "${NC}[VERBOSE]${NC} $*" >&2
    fi
}

# Compatibility aliases for nixup-with-secrets style with optional emoji support
print_msg() {
    local type="$1"
    shift

    if [[ "${EMOJI_LOG_STYLE:-false}" == true ]]; then
        # Emoji versions
        case "$type" in
            "status") echo -e "${BLUE}🔧${NC} $*" ;;
            "success") echo -e "${GREEN}✅${NC} $*" ;;
            "warning") echo -e "${YELLOW}⚠️${NC} $*" ;;
            "error") echo -e "${RED}❌${NC} $*" ;;
            "bootstrap") echo -e "${BLUE}🚀${NC} $*" ;;
        esac
    else
        # Standard versions
        case "$type" in
            "status") log_info "$@" ;;
            "success") log_success "$@" ;;
            "warning") log_warning "$@" ;;
            "error") log_error "$@" ;;
            "bootstrap") echo -e "${BLUE}🚀${NC} $*" ;;
        esac
    fi
}

print_status() { log_info "$@"; }
print_success() { log_success "$@"; }
print_warning() { log_warning "$@"; }
print_error() { log_error "$@"; }
print_bootstrap() { echo -e "${BLUE}🚀${NC} $*"; }

# Common argument parsing helpers
show_help_and_exit() {
    if declare -f show_help >/dev/null; then
        show_help
        exit 0
    else
        log_error "Help function not defined in script"
        exit 1
    fi
}

# Check if we're in a git repository (common utility)
check_git_repo() {
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        log_error "Not in a git repository"
        log_error "Please run this command from within a git repository"
        exit 1
    fi
}

# Common dependency checker
check_command() {
    local cmd="$1"
    local install_hint="${2:-}"

    if ! command -v "$cmd" &> /dev/null; then
        log_error "$cmd is not installed or not in PATH"
        if [[ -n "$install_hint" ]]; then
            log_error "$install_hint"
        fi
        exit 1
    fi
}

# Validate that an option has a required argument
require_argument() {
    local option="$1"
    local argument="${2:-}"

    if [[ -z "$argument" ]]; then
        log_error "Option $option requires an argument"
        return 1
    fi
}

# Validate numeric parameters (common in many scripts)
validate_numeric() {
    local value="$1"
    local name="$2"
    local min="$3"
    local max="$4"

    if ! [[ "$value" =~ ^[0-9]+$ ]]; then
        log_error "Invalid $name: '$value' (must be a number)"
        exit 1
    fi

    if (( value < min || value > max )); then
        log_error "Invalid $name: $value (must be between $min and $max)"
        exit 1
    fi
}
